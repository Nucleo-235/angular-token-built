{"version":3,"sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"names":["ANGULAR_TOKEN_OPTIONS","InjectionToken","AngularTokenService","http","config","platformId","activatedRoute","router","this","localStorage","global","window","isPlatformServer","open","location","href","origin","setItem","getItem","removeItem","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","loginField","oAuthBase","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","oAuthBrowserCallbacks","mergedOptions","assign","options","console","warn","tryLoadAuthData","Object","defineProperty","prototype","userType","name","undefined","userData","authData","userSignedIn","canActivate","route","state","url","navigate","registerAccount","registerData","getUserTypeByName","password_confirmation","passwordConfirmation","login","confirm_success_url","post","getServerPath","deleteAccount","delete","signIn","signInData","_this","body","_a","password","observ","observe","pipe","share","subscribe","res","signInOAuth","oAuthType","inAppBrowser","platform","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","is","windowOptions","key","hasOwnProperty","popup","requestCredentialsViaPostMessage","oAuthBrowserCallback_1","Error","browser_1","create","Observable","observer","on","ev","indexOf","executeScript","code","then","credentials","getAuthDataFromPostMessage","pollerSubscription","interval","next","complete","unsubscribe","close","error","processOAuthCallback","getAuthDataFromParams","signOut","finalize","validateToken","get","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","getUserPath","path","getApiPath","constructedPath","windowType","encodeURIComponent","getAuthDataFromStorage","getAuthHeadersFromResponse","data","headers","accessToken","client","expiry","tokenType","uid","setAuthData","checkAuthData","queryParams","authWindow","pollerObserv","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","bind","closed","postMessage","message","find","Injectable","providedIn","HttpClient","Inject","decorators","type","PLATFORM_ID","ActivatedRoute","Optional","Router","AngularTokenInterceptor","tokenService","intercept","req","currentAuthData","tokenOptions","match","access-token","token-type","clone","setHeaders","handle","tap","handleResponse","err","HttpResponse","HttpErrorResponse","AngularTokenModule","parentModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","angularTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"siBAEA,IAAaA,EAAwB,IAAIC,EAAAA,eAAe,yBCFxDC,EAAA,WAqEE,SAAAA,EACUC,EACuBC,EACFC,EACTC,EACAC,GAJZC,KAAAL,KAAAA,EAEqBK,KAAAH,WAAAA,EACTG,KAAAF,eAAAA,EACAE,KAAAD,OAAAA,EAPdC,KAAAC,aAA8B,GASpCD,KAAKE,OAA4B,oBAAXC,OAA0BA,OAAS,GAErDC,EAAAA,iBAAiBP,IACnBG,KAAKE,OAAS,CACZG,KAAM,WAAM,OAAA,MACZC,SAAU,CACRC,KAAM,IACNC,OAAQ,MAIZR,KAAKC,aAAaQ,QAAU,WAAM,OAAA,MAClCT,KAAKC,aAAaS,QAAU,WAAM,OAAA,MAClCV,KAAKC,aAAaU,WAAa,WAAM,OAAA,OAErCX,KAAKC,aAAeA,iBAGhBW,EAAsC,CAC1CC,QAA4B,KAC5BC,QAA4B,KAE5BC,WAA4B,eAC5BC,eAA4B,KAC5BC,0BAA4B,KAE5BC,YAA4B,gBAC5BC,kBAA4B,sBAC5BC,uBAA4B,EAE5BC,oBAA4B,OAC5BC,kBAA4B,OAC5BC,wBAA4BvB,KAAKE,OAAOI,SAASC,KAEjDiB,mBAA4B,OAE5BC,kBAA4B,gBAC5BC,sBAA4B1B,KAAKE,OAAOI,SAASC,KAEjDoB,UAA4B,KAC5BC,WAA4B,QAE5BC,UAA4B7B,KAAKE,OAAOI,SAASE,OACjDsB,WAAY,CACVC,OAA0B,eAE5BC,kBAA4B,iBAC5BC,gBAA4B,YAC5BC,mBAA4B,KAE5BC,sBAAuB,CACrBJ,OAA0B,yBAIxBK,EAAgB,OAAcC,OAAOzB,EAAgBhB,GAC3DI,KAAKsC,QAAUF,EAEc,OAAzBpC,KAAKsC,QAAQxB,SACfyB,QAAQC,KAAK,gLAIfxC,KAAKyC,yBA5GPC,OAAAC,eAAIjD,EAAAkD,UAAA,kBAAe,KAAnB,WACE,OAAqB,MAAjB5C,KAAK6C,SACA7C,KAAK6C,SAASC,KAEdC,2CAIXL,OAAAC,eAAIjD,EAAAkD,UAAA,kBAAe,KAAnB,WACE,OAAO5C,KAAKgD,0CAGdN,OAAAC,eAAIjD,EAAAkD,UAAA,kBAAe,KAAnB,WACE,OAAO5C,KAAKiD,0CAGdP,OAAAC,eAAIjD,EAAAkD,UAAA,UAAO,KAAX,WAGE,OAFAL,QAAQC,KAAK,6HAENxC,KAAKsC,QAAQxB,yCAGtB4B,OAAAC,eAAIjD,EAAAkD,UAAA,eAAY,KAAhB,WACE,OAAO5C,KAAKsC,aAGd,SAAiBA,GACftC,KAAKsC,QAAU,OAAcD,OAAOrC,KAAKsC,QAASA,oCAoFpD5C,EAAAkD,UAAAM,aAAA,WACI,QAASlD,KAAKiD,UAGlBvD,EAAAkD,UAAAO,YAAA,SAAYC,EAAOC,GACjB,QAAIrD,KAAKkD,iBAIHlD,KAAKsC,QAAQrB,2BACfjB,KAAKC,aAAaQ,QAChBT,KAAKsC,QAAQrB,0BACboC,EAAMC,KAKNtD,KAAKD,QAAUC,KAAKsC,QAAQtB,gBAC9BhB,KAAKD,OAAOwD,SAAS,CAACvD,KAAKsC,QAAQtB,kBAG9B,IAYXtB,EAAAkD,UAAAY,gBAAA,SAAgBC,GAIe,OAF7BA,EAAef,OAAOL,OAAO,GAAIoB,IAEhBZ,SACf7C,KAAK6C,SAAW,MAEhB7C,KAAK6C,SAAW7C,KAAK0D,kBAAkBD,EAAaZ,iBAC7CY,EAAaZ,UAIkB,MAAtCY,EAAaE,uBACwB,MAArCF,EAAaG,uBAEbH,EAAaE,sBAAwBF,EAAaG,4BAC3CH,EAAaG,0BAGhBC,EAAQJ,EAAaI,MAM3B,cALOJ,EAAaI,MACpBJ,EAAazD,KAAKsC,QAAQV,YAAciC,EAExCJ,EAAaK,oBAAsB9D,KAAKsC,QAAQf,wBAEzCvB,KAAKL,KAAKoE,KAAK/D,KAAKgE,gBAAkBhE,KAAKsC,QAAQjB,oBAAqBoC,IAIjF/D,EAAAkD,UAAAqB,cAAA,WACE,OAAOjE,KAAKL,KAAKuE,UAAOlE,KAAKgE,gBAAkBhE,KAAKsC,QAAQhB,oBAI9D5B,EAAAkD,UAAAuB,OAAA,SAAOC,GAAP,MAAAC,EAAArE,KACEA,KAAK6C,SAAmC,MAAvBuB,EAAWvB,SAAoB,KAAO7C,KAAK0D,kBAAkBU,EAAWvB,cAEnFyB,IAAIC,EAAA,IACPvE,KAAKsC,QAAQV,YAAawC,EAAWP,MACtCU,EAAAC,SAAUJ,EAAWI,YAGjBC,EAASzE,KAAKL,KAAKoE,KAAK/D,KAAKgE,gBAAkBhE,KAAKsC,QAAQvB,WAAYuD,EAAM,CAAEI,QAAS,aAAcC,KAAKC,EAAAA,SAIlH,OAFAH,EAAOI,UAAU,SAAAC,GAAO,OAAAT,EAAKrB,SAAW8B,EAAIR,KAAW,OAEhDG,GAGT/E,EAAAkD,UAAAmC,YAAA,SAAYC,EAAmBC,EAA4CC,GAA3E,IAAAb,EAAArE,KAEQmF,EAAoBnF,KAAKoF,aAAaJ,GACtCK,EAAiBrF,KAAKE,OAAOI,SAASE,OAAM,IAAIR,KAAKsC,QAAQN,kBAC7DC,EAA0BjC,KAAKsC,QAAQL,gBACvCqD,EAAkBtF,KAAKuF,YAAYJ,EAAWE,EAAapD,GAEjE,GAAwB,cAApBA,KACkB,gBAAnBA,GAAuCiD,GAAaA,EAASM,GAAG,aAAgBN,EAASM,GAAG,QAAUN,EAASM,GAAG,aAAe,KAC5HtD,EAAqBlC,KAAKsC,QAAQJ,mBACpCuD,EAAgB,GAEpB,GAAIvD,EACF,IAAK,IAAMwD,KAAOxD,EACZA,EAAmByD,eAAeD,KAClCD,GAAiB,IAAIC,EAAG,IAAIxD,EAAmBwD,QAKjDE,EAAQzF,OAAOE,KACjBiF,EACA,SACA,4BAA4BG,GAEhC,OAAOzF,KAAK6F,iCAAiCD,GACxC,GAAuB,gBAAnB3D,EAAmC,KACxC6D,EAAuB9F,KAAKsC,QAAQH,sBAAsB6C,GAC9D,IAAKc,EACH,MAAM,IAAIC,MAAM,gCAAgCf,EAAS,gFAWvDgB,EAAUf,EAAagB,OACvBX,EACA,SACA,eAGJ,OAAO,IAAIY,EAAAA,WAAW,SAACC,GACrBH,EAAQI,GAAG,YAAYvB,UAAU,SAACwB,IACY,EAAxCA,EAAG/C,IAAIgD,QAAQR,IACjBE,EAAQO,cAAc,CAACC,KAAM,0BAA0BC,KAAK,SAACC,GAC3DrC,EAAKsC,2BAA2BD,EAAY,QAIxCE,EAFeC,EAAAA,SAAS,KAEUhC,UAAU,WAC1CR,EAAKnB,iBACPiD,EAASW,KAAKzC,EAAKpB,UACnBkD,EAASY,WAETH,EAAmBI,cACnBhB,EAAQiB,UAET,SAACC,GACFf,EAASe,MAAMA,GACff,EAASY,cAEV,SAACG,GACFf,EAASe,MAAMA,GACff,EAASY,cAGZ,SAACG,GACFf,EAASe,MAAMA,GACff,EAASY,eAGR,GAAwB,eAApB9E,EAGT,MAAM,IAAI8D,MAAM,gCAAgC9D,EAAe,KAF/DjC,KAAKE,OAAOI,SAASC,KAAO+E,GAMhC5F,EAAAkD,UAAAuE,qBAAA,WACEnH,KAAKoH,yBAIP1H,EAAAkD,UAAAyE,QAAA,WAAA,IAAAhD,EAAArE,KAkBE,OAjBeA,KAAKL,KAAKuE,UAAYlE,KAAKgE,gBAAkBhE,KAAKsC,QAAQpB,aAElEyD,KACC2C,EAAAA,SAAS,WACLjD,EAAKpE,aAAaU,WAAW,eAC7B0D,EAAKpE,aAAaU,WAAW,UAC7B0D,EAAKpE,aAAaU,WAAW,UAC7B0D,EAAKpE,aAAaU,WAAW,aAC7B0D,EAAKpE,aAAaU,WAAW,OAE7B0D,EAAKpB,SAAW,KAChBoB,EAAKxB,SAAW,KAChBwB,EAAKrB,SAAW,SAS9BtD,EAAAkD,UAAA2E,cAAA,WAAA,IAAAlD,EAAArE,KACQyE,EAASzE,KAAKL,KAAK6H,IAAIxH,KAAKgE,gBAAkBhE,KAAKsC,QAAQnB,mBAAmBwD,KAAKC,EAAAA,SAUzF,OARAH,EAAOI,UACL,SAACC,GAAQ,OAAAT,EAAKrB,SAAW8B,EAAU,MACnC,SAACoC,GACsB,MAAjBA,EAAMO,QAAkBpD,EAAK/B,QAAQlB,uBACvCiD,EAAKgD,YAIJ5C,GAIT/E,EAAAkD,UAAA8E,eAAA,SAAeC,OAMTC,EAJ+B,MAA/BD,EAAmB9E,WACrB7C,KAAK6C,SAAW7C,KAAK0D,kBAAkBiE,EAAmB9E,WAM1D+E,EADwC,MAAtCD,EAAmBE,gBACd,CACLrD,SAAwBmD,EAAmBnD,SAC3Cb,sBAAwBgE,EAAmB/D,sBAGtC,CACLkE,iBAAwBH,EAAmBE,gBAC3CrD,SAAwBmD,EAAmBnD,SAC3Cb,sBAAwBgE,EAAmB/D,sBAI3C+D,EAAmBI,qBACrBH,EAAKI,qBAAuBL,EAAmBI,wBAG3CzD,EAAOsD,EACb,OAAO5H,KAAKL,KAAKsI,IAAIjI,KAAKgE,gBAAkBhE,KAAKsC,QAAQd,mBAAoB8C,IAI/E5E,EAAAkD,UAAAsF,cAAA,SAAcC,SAEZnI,KAAK6C,SAA0C,MAA9BsF,EAAkBtF,SAAoB,KAAO7C,KAAK0D,kBAAkByE,EAAkBtF,cAEjGyB,IAAIC,EAAA,IACPvE,KAAKsC,QAAQV,YAAauG,EAAkBtE,MAC7CU,EAAA6D,aAAcpI,KAAKsC,QAAQZ,yBAG7B,OAAO1B,KAAKL,KAAKoE,KAAK/D,KAAKgE,gBAAkBhE,KAAKsC,QAAQb,kBAAmB6C,IAUvE5E,EAAAkD,UAAAyF,YAAR,WACE,OAAyB,MAAjBrI,KAAK6C,SAAoB,GAAK7C,KAAK6C,SAASyF,KAAO,KAGrD5I,EAAAkD,UAAA2F,WAAR,eACMC,EAAkB,GAUtB,OAR4B,MAAxBxI,KAAKsC,QAAQxB,UACf0H,GAAmBxI,KAAKsC,QAAQxB,QAAU,KAGhB,MAAxBd,KAAKsC,QAAQzB,UACf2H,GAAmBxI,KAAKsC,QAAQzB,QAAU,KAGrC2H,GAGD9I,EAAAkD,UAAAoB,cAAR,WACE,OAAOhE,KAAKuI,aAAevI,KAAKqI,eAG1B3I,EAAAkD,UAAAwC,aAAR,SAAqBJ,OACfG,EAQJ,OAJiB,OAFjBA,EAAYnF,KAAKsC,QAAQR,WAAWkD,MAGlCG,EAAY,SAASH,GAGhBG,GAGDzF,EAAAkD,UAAA2C,YAAR,SAAoBJ,EAAmBE,EAAqBoD,OACtDnF,EAUJ,OARAA,EAAWtD,KAAKsC,QAAQT,UAAS,IAAIsD,EACrC7B,GAAQ,yBAAyBmF,EACjCnF,GAAQ,oBAAoBoF,mBAAmBrD,GAE1B,MAAjBrF,KAAK6C,WACPS,GAAO,mBAAmBtD,KAAK6C,SAASC,MAGnCQ,GAWD5D,EAAAkD,UAAAH,gBAAR,eAEQI,EAAW7C,KAAK0D,kBAAkB1D,KAAKC,aAAaS,QAAQ,aAE9DmC,IACF7C,KAAK6C,SAAWA,GAGlB7C,KAAK2I,yBAED3I,KAAKF,gBACPE,KAAKoH,yBASF1H,EAAAkD,UAAAgG,2BAAP,SAAkCC,OAC1BC,EAAUD,EAAKC,QAEf7F,EAAqB,CACzB8F,YAAgBD,EAAQtB,IAAI,gBAC5BwB,OAAgBF,EAAQtB,IAAI,UAC5ByB,OAAgBH,EAAQtB,IAAI,UAC5B0B,UAAgBJ,EAAQtB,IAAI,cAC5B2B,IAAgBL,EAAQtB,IAAI,QAG9BxH,KAAKoJ,YAAYnG,IAIXvD,EAAAkD,UAAA+D,2BAAR,SAAmCkC,OAC3B5F,EAAqB,CACzB8F,YAAgBF,EAAiB,WACjCG,OAAgBH,EAAgB,UAChCI,OAAgBJ,EAAa,OAC7BK,UAAgB,SAChBC,IAAgBN,EAAU,KAG5B7I,KAAKoJ,YAAYnG,IAIZvD,EAAAkD,UAAA+F,uBAAP,eAEQ1F,EAAqB,CACzB8F,YAAgB/I,KAAKC,aAAaS,QAAQ,eAC1CsI,OAAgBhJ,KAAKC,aAAaS,QAAQ,UAC1CuI,OAAgBjJ,KAAKC,aAAaS,QAAQ,UAC1CwI,UAAgBlJ,KAAKC,aAAaS,QAAQ,aAC1CyI,IAAgBnJ,KAAKC,aAAaS,QAAQ,QAGxCV,KAAKqJ,cAAcpG,KACrBjD,KAAKiD,SAAWA,IAKZvD,EAAAkD,UAAAwE,sBAAR,WAAA,IAAA/C,EAAArE,KACEA,KAAKF,eAAewJ,YAAYzE,UAAU,SAAAyE,OAClCrG,EAAqB,CACzB8F,YAAgBO,EAAmB,OAAKA,EAAwB,WAChEN,OAAgBM,EAAuB,UACvCL,OAAgBK,EAAoB,OACpCJ,UAAgB,SAChBC,IAAgBG,EAAiB,KAG/BjF,EAAKgF,cAAcpG,KACrBoB,EAAKpB,SAAWA,MAYdvD,EAAAkD,UAAAwG,YAAR,SAAoBnG,GACdjD,KAAKqJ,cAAcpG,KAErBjD,KAAKiD,SAAWA,EAEhBjD,KAAKC,aAAaQ,QAAQ,cAAewC,EAAS8F,aAClD/I,KAAKC,aAAaQ,QAAQ,SAAUwC,EAAS+F,QAC7ChJ,KAAKC,aAAaQ,QAAQ,SAAUwC,EAASgG,QAC7CjJ,KAAKC,aAAaQ,QAAQ,YAAawC,EAASiG,WAChDlJ,KAAKC,aAAaQ,QAAQ,MAAOwC,EAASkG,KAErB,MAAjBnJ,KAAK6C,UACP7C,KAAKC,aAAaQ,QAAQ,WAAYT,KAAK6C,SAASC,QAclDpD,EAAAkD,UAAAyG,cAAR,SAAsBpG,GAEpB,OAC0B,MAAxBA,EAAS8F,aACU,MAAnB9F,EAAS+F,QACU,MAAnB/F,EAASgG,QACa,MAAtBhG,EAASiG,WACO,MAAhBjG,EAASkG,MAEY,MAAjBnJ,KAAKiD,UACAA,EAASgG,QAAUjJ,KAAKiD,SAASgG,SAgBtCvJ,EAAAkD,UAAAiD,iCAAR,SAAyC0D,OACjCC,EAAe3C,EAAAA,SAAS,KAExB4C,EAAiBC,EAAAA,UAAU1J,KAAKE,OAAQ,WAAWyE,KACvDgF,EAAAA,MAAM,QACNC,EAAAA,OAAO5J,KAAK6J,4BAORjD,GAJuB6C,EAAe5E,UAC1C7E,KAAK2G,2BAA2BmD,KAAK9J,OAGZwJ,EAAa3E,UAAU,WAC5C0E,EAAWQ,OACbnD,EAAmBI,cAEnBuC,EAAWS,YAAY,qBAAsB,QAIjD,OAAOP,GAGD/J,EAAAkD,UAAAiH,0BAAR,SAAkChB,GAChC,GAAqB,uBAAjBA,EAAKoB,SAAqD,gBAAjBpB,EAAKoB,QAChD,OAAOpB,GAYHnJ,EAAAkD,UAAAc,kBAAR,SAA0BZ,GACxB,OAAY,MAARA,GAA0C,MAA1B9C,KAAKsC,QAAQX,UACxB,KAGF3B,KAAKsC,QAAQX,UAAUuI,KAC5B,SAAArH,GAAY,OAAAA,EAASC,OAASA,yBAlmBnCqH,EAAAA,WAAUvC,KAAA,CAAC,CACVwC,WAAY,oDAzBLC,EAAAA,8CAqEJC,EAAAA,OAAM1C,KAAA,CAACpI,YACiCkD,OAAM6H,WAAA,CAAA,CAAAC,KAA9CF,EAAAA,OAAM1C,KAAA,CAAC6C,EAAAA,sBAvEHC,EAAAA,eAAcH,WAAA,CAAA,CAAAC,KAwElBG,EAAAA,kBAxEoBC,EAAAA,OAAML,WAAA,CAAA,CAAAC,KAyE1BG,EAAAA,iOA1EL,GCAAE,EAAA,WAaE,SAAAA,EAAqBC,GAAA9K,KAAA8K,aAAAA,EAwCvB,OArCED,EAAAjI,UAAAmI,UAAA,SAAUC,EAAuBlE,GAAjC,IAAAzC,EAAArE,KAME,GAHAA,KAAK8K,aAAanC,yBAGd3I,KAAK8K,aAAaG,kBACwB,OAA3CjL,KAAK8K,aAAaI,aAAapK,SAAoBkK,EAAI1H,IAAI6H,MAAMnL,KAAK8K,aAAaI,aAAapK,UAAW,KAEtGgI,EAAU,CACdsC,eAAgBpL,KAAK8K,aAAaG,gBAAgBlC,YAClDC,OAAgBhJ,KAAK8K,aAAaG,gBAAgBjC,OAClDC,OAAgBjJ,KAAK8K,aAAaG,gBAAgBhC,OAClDoC,aAAgBrL,KAAK8K,aAAaG,gBAAgB/B,UAClDC,IAAgBnJ,KAAK8K,aAAaG,gBAAgB9B,KAGpD6B,EAAMA,EAAIM,MAAM,CACdC,WAAYzC,IAIhB,OAAOhC,EAAK0E,OAAOR,GAAKrG,KAAK8G,EAAAA,IACzB,SAAA3G,GAAO,OAAAT,EAAKqH,eAAe5G,IAC3B,SAAA6G,GAAO,OAAAtH,EAAKqH,eAAeC,OAMzBd,EAAAjI,UAAA8I,eAAR,SAAuB5G,IACjBA,aAAe8G,EAAAA,cAAgB9G,aAAe+G,EAAAA,qBACD,OAA3C7L,KAAK8K,aAAaI,aAAapK,SAAqBgE,EAAIxB,KAAOwB,EAAIxB,IAAI6H,MAAMnL,KAAK8K,aAAaI,aAAapK,WAC9Gd,KAAK8K,aAAalC,2BAA0B,wBAxCnDuB,EAAAA,sDALQzK,KAiDTmL,EArDA,GCAAiB,EAAA,WAaE,SAAAA,EAAoCC,GAClC,GAAIA,EACF,MAAM,IAAIhG,MAAM,iGAqBtB,OAlBS+F,EAAAE,QAAP,SAAe1J,GACb,MAAO,CACL2J,SAAUH,EACVI,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,SAAUxB,EACVyB,OAAO,GAEThK,EAAQiK,6BACR,CACEJ,QAAS3M,EACTgN,SAAUlK,GAEZ5C,yBAtBP+M,EAAAA,oDAGmDX,EAAkBvB,WAAA,CAAA,CAAAC,KAAvDG,EAAAA,UAAQ,CAAAH,KAAIkC,EAAAA,cAuB3BZ,EApCA","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n\n  AngularTokenOptions,\n\n  TokenPlatform,\n  TokenInAppBrowser,\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType != null) {\n      return this.userType.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData;\n  }\n\n  get apiBase(): string {\n    console.warn('[angular-token] The attribute .apiBase will be removed in the next major release, please use' +\n    '.tokenOptions.apiBase instead');\n    return this.options.apiBase;\n  }\n\n  get tokenOptions(): AngularTokenOptions {\n    return this.options;\n  }\n\n  set tokenOptions(options: AngularTokenOptions) {\n    this.options = (<any>Object).assign(this.options, options);\n  }\n\n  private options: AngularTokenOptions;\n  private userType: UserType;\n  private authData: AuthData;\n  private userData: UserData;\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(platformId)) {\n      this.global = {\n        open: () => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      this.localStorage.setItem = () => null;\n      this.localStorage.getItem = () => null;\n      this.localStorage.removeItem = () => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n\n      oAuthBrowserCallbacks: {\n        github:                   'auth/github/callback',\n      },\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  userSignedIn(): boolean {\n      return !!this.authData;\n  }\n\n  canActivate(route, state): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData): Observable<any> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType = null;\n    } else {\n      this.userType = this.getUserTypeByName(registerData.userType);\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post(this.getServerPath() + this.options.registerAccountPath, registerData);\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<any> {\n    return this.http.delete(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData): Observable<any> {\n    this.userType = (signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType);\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    const observ = this.http.post(this.getServerPath() + this.options.signInPath, body, { observe: 'response' }).pipe(share());\n\n    observ.subscribe(res => this.userData = res.body['data']);\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string, inAppBrowser?: TokenInAppBrowser<any, any>, platform?: TokenPlatform) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow' || \n      (oAuthWindowType == 'inAppBrowser' && (!platform || !platform.is('cordova') || !(platform.is('ios') || platform.is('android'))))) {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType == 'inAppBrowser') {\n      let oAuthBrowserCallback = this.options.oAuthBrowserCallbacks[oAuthType];\n      if (!oAuthBrowserCallback) {\n        throw new Error(`To login with oAuth provider ${oAuthType} using inAppBrowser the callback (in oAuthBrowserCallbacks) is required.`);\n      }\n      // let oAuthWindowOptions = this.options.oAuthWindowOptions;\n      // let windowOptions = '';\n\n      //  if (oAuthWindowOptions) {\n      //     for (let key in oAuthWindowOptions) {\n      //         windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n      //     }\n      // }\n\n      let browser = inAppBrowser.create(\n          authUrl,\n          '_blank',\n          'location=no'\n      );\n      \n      return new Observable((observer) => {\n        browser.on('loadstop').subscribe((ev: any) => {\n          if (ev.url.indexOf(oAuthBrowserCallback) > -1) {\n            browser.executeScript({code: \"requestCredentials();\"}).then((credentials: any) => {\n              this.getAuthDataFromPostMessage(credentials[0]);\n\n              let pollerObserv = interval(400);\n\n              let pollerSubscription = pollerObserv.subscribe(() => {\n                if (this.userSignedIn()) {\n                  observer.next(this.authData);\n                  observer.complete();\n\n                  pollerSubscription.unsubscribe();\n                  browser.close();\n                }\n              }, (error: any) => {\n                observer.error(error);\n                observer.complete();\n             });\n            }, (error: any) => {\n              observer.error(error);\n              observer.complete();\n           });\n          }\n        }, (error: any) => {\n          observer.error(error);\n          observer.complete();\n        });\n      })\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<any> {\n    const observ = this.http.delete<any>(this.getServerPath() + this.options.signOutPath)\n    // Only remove the localStorage and clear the data after the call\n          .pipe(\n            finalize(() => {\n                this.localStorage.removeItem('accessToken');\n                this.localStorage.removeItem('client');\n                this.localStorage.removeItem('expiry');\n                this.localStorage.removeItem('tokenType');\n                this.localStorage.removeItem('uid');\n\n                this.authData = null;\n                this.userType = null;\n                this.userData = null;\n              }\n            )\n          );\n\n    return observ;\n  }\n\n  // Validate token request\n  validateToken(): Observable<any> {\n    const observ = this.http.get(this.getServerPath() + this.options.validateTokenPath).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData = res['data'],\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<any> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType = this.getUserTypeByName(updatePasswordData.userType);\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = args;\n    return this.http.put(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<any> {\n\n    this.userType = (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType);\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: this.options.resetPasswordCallback\n    };\n\n    return this.http.post(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    return (this.userType == null) ? '' : this.userType.path + '/';\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.options.apiBase != null) {\n      constructedPath += this.options.apiBase + '/';\n    }\n\n    if (this.options.apiPath != null) {\n      constructedPath += this.options.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getServerPath(): string {\n    return this.getApiPath() + this.getUserPath();\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.options.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = `/auth/${oAuthType}`;\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n    let url: string;\n\n    url =   `${this.options.oAuthBase}/${oAuthPath}`;\n    url +=  `?omniauth_window_type=${windowType}`;\n    url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n    if (this.userType != null) {\n      url += `&resource_class=${this.userType.name}`;\n    }\n\n    return url;\n  }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n    if (userType) {\n      this.userType = userType;\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    // if (this.authData) {\n    //     this.validateToken();\n    // }\n  }\n\n  // Parse Auth data from response\n  public getAuthHeadersFromResponse(data: any): void {\n    const headers = data.headers;\n\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  public getAuthDataFromStorage(): void {\n\n    const authData: AuthData = {\n      accessToken:    this.localStorage.getItem('accessToken'),\n      client:         this.localStorage.getItem('client'),\n      expiry:         this.localStorage.getItem('expiry'),\n      tokenType:      this.localStorage.getItem('tokenType'),\n      uid:            this.localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.authData = authData;\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    this.activatedRoute.queryParams.subscribe(queryParams => {\n      const authData: AuthData = {\n        accessToken:    queryParams['token'] || queryParams['auth_token'],\n        client:         queryParams['client_id'],\n        expiry:         queryParams['expiry'],\n        tokenType:      'Bearer',\n        uid:            queryParams['uid']\n      };\n\n      if (this.checkAuthData(authData)) {\n        this.authData = authData;\n      }\n    });\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n\n      this.authData = authData;\n\n      this.localStorage.setItem('accessToken', authData.accessToken);\n      this.localStorage.setItem('client', authData.client);\n      this.localStorage.setItem('expiry', authData.expiry);\n      this.localStorage.setItem('tokenType', authData.tokenType);\n      this.localStorage.setItem('uid', authData.uid);\n\n      if (this.userType != null) {\n        this.localStorage.setItem('userType', this.userType.name);\n      }\n\n    }\n  }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.authData != null) {\n        return authData.expiry >= this.authData.expiry;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = interval(500);\n\n    const responseObserv = fromEvent(this.global, 'message').pipe(\n      pluck('data'),\n      filter(this.oAuthWindowResponseFilter)\n    );\n\n    const responseSubscription = responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.options.userTypes == null) {\n      return null;\n    }\n\n    return this.options.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n  private atOptions: AngularTokenOptions;\n\n  constructor( private tokenService: AngularTokenService ) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    if (this.tokenService.currentAuthData &&\n      (this.tokenService.tokenOptions.apiBase === null || req.url.match(this.tokenService.tokenOptions.apiBase))) {\n\n      const headers = {\n        'access-token': this.tokenService.currentAuthData.accessToken,\n        'client':       this.tokenService.currentAuthData.client,\n        'expiry':       this.tokenService.currentAuthData.expiry,\n        'token-type':   this.tokenService.currentAuthData.tokenType,\n        'uid':          this.tokenService.currentAuthData.uid\n      };\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: any): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.tokenOptions.apiBase === null || (res.url && res.url.match(this.tokenService.tokenOptions.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(<any>res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"]}